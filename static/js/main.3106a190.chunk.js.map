{"version":3,"sources":["../../src/source/qr.js","../../src/index.tsx","App.tsx","index.tsx"],"names":["version","width","neccblk1","neccblk2","datablkw","eccblkwid","adelta","vpat","fmtword","eccblocks","glog","gexp","strinbuf","eccbuf","qrframe","framask","rlens","setmask","x","y","bt","putalign","j","modnn","genpoly","appendrs","data","dlen","ecbuf","eclen","i","fb","ismasked","applymask","m","r3x","r3y","qrc","badruns","length","runsbad","N1","badcheck","thisbad","bw","h","b","b1","big","count","doqr","ecclevel","qr_value","wd","ht","elem","document","px","Math","qf","instring","v","t","k","genframe","ReactQrcode","qrvalue","size","level","useState","result","setresult","useEffect","height","src","App","setQrvalue","setsize","className","href","data-ribbon","title","style","margin","value","onChange","e","target","type","min","placeholder","parseInt","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3106a190.chunk.js","sourcesContent":["\n\n// alignment pattern\nlet adelta = [\n    0, 11, 15, 19, 23, 27, 31, // force 1 pat\n    16, 18, 20, 22, 24, 26, 28, 20, 22, 24, 24, 26, 28, 28, 22, 24, 24,\n    26, 26, 28, 28, 24, 24, 26, 26, 26, 28, 28, 24, 26, 26, 26, 28, 28\n];\n\n// version block\nlet vpat = [\n    0xc94, 0x5bc, 0xa99, 0x4d3, 0xbf6, 0x762, 0x847, 0x60d,\n    0x928, 0xb78, 0x45d, 0xa17, 0x532, 0x9a6, 0x683, 0x8c9,\n    0x7ec, 0xec4, 0x1e1, 0xfab, 0x08e, 0xc1a, 0x33f, 0xd75,\n    0x250, 0x9d5, 0x6f0, 0x8ba, 0x79f, 0xb0b, 0x42e, 0xa64,\n    0x541, 0xc69\n];\n\n// final format bits with mask: level << 3 | mask\nlet fmtword = [\n    0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976,    //L\n    0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0,    //M\n    0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed,    //Q\n    0x1689, 0x13be, 0x1ce7, 0x19d0, 0x0762, 0x0255, 0x0d0c, 0x083b    //H\n];\n\n// 4 per version: number of blocks 1,2; data width; ecc width\nlet eccblocks = [\n    1, 0, 19, 7, 1, 0, 16, 10, 1, 0, 13, 13, 1, 0, 9, 17,\n    1, 0, 34, 10, 1, 0, 28, 16, 1, 0, 22, 22, 1, 0, 16, 28,\n    1, 0, 55, 15, 1, 0, 44, 26, 2, 0, 17, 18, 2, 0, 13, 22,\n    1, 0, 80, 20, 2, 0, 32, 18, 2, 0, 24, 26, 4, 0, 9, 16,\n    1, 0, 108, 26, 2, 0, 43, 24, 2, 2, 15, 18, 2, 2, 11, 22,\n    2, 0, 68, 18, 4, 0, 27, 16, 4, 0, 19, 24, 4, 0, 15, 28,\n    2, 0, 78, 20, 4, 0, 31, 18, 2, 4, 14, 18, 4, 1, 13, 26,\n    2, 0, 97, 24, 2, 2, 38, 22, 4, 2, 18, 22, 4, 2, 14, 26,\n    2, 0, 116, 30, 3, 2, 36, 22, 4, 4, 16, 20, 4, 4, 12, 24,\n    2, 2, 68, 18, 4, 1, 43, 26, 6, 2, 19, 24, 6, 2, 15, 28,\n    4, 0, 81, 20, 1, 4, 50, 30, 4, 4, 22, 28, 3, 8, 12, 24,\n    2, 2, 92, 24, 6, 2, 36, 22, 4, 6, 20, 26, 7, 4, 14, 28,\n    4, 0, 107, 26, 8, 1, 37, 22, 8, 4, 20, 24, 12, 4, 11, 22,\n    3, 1, 115, 30, 4, 5, 40, 24, 11, 5, 16, 20, 11, 5, 12, 24,\n    5, 1, 87, 22, 5, 5, 41, 24, 5, 7, 24, 30, 11, 7, 12, 24,\n    5, 1, 98, 24, 7, 3, 45, 28, 15, 2, 19, 24, 3, 13, 15, 30,\n    1, 5, 107, 28, 10, 1, 46, 28, 1, 15, 22, 28, 2, 17, 14, 28,\n    5, 1, 120, 30, 9, 4, 43, 26, 17, 1, 22, 28, 2, 19, 14, 28,\n    3, 4, 113, 28, 3, 11, 44, 26, 17, 4, 21, 26, 9, 16, 13, 26,\n    3, 5, 107, 28, 3, 13, 41, 26, 15, 5, 24, 30, 15, 10, 15, 28,\n    4, 4, 116, 28, 17, 0, 42, 26, 17, 6, 22, 28, 19, 6, 16, 30,\n    2, 7, 111, 28, 17, 0, 46, 28, 7, 16, 24, 30, 34, 0, 13, 24,\n    4, 5, 121, 30, 4, 14, 47, 28, 11, 14, 24, 30, 16, 14, 15, 30,\n    6, 4, 117, 30, 6, 14, 45, 28, 11, 16, 24, 30, 30, 2, 16, 30,\n    8, 4, 106, 26, 8, 13, 47, 28, 7, 22, 24, 30, 22, 13, 15, 30,\n    10, 2, 114, 28, 19, 4, 46, 28, 28, 6, 22, 28, 33, 4, 16, 30,\n    8, 4, 122, 30, 22, 3, 45, 28, 8, 26, 23, 30, 12, 28, 15, 30,\n    3, 10, 117, 30, 3, 23, 45, 28, 4, 31, 24, 30, 11, 31, 15, 30,\n    7, 7, 116, 30, 21, 7, 45, 28, 1, 37, 23, 30, 19, 26, 15, 30,\n    5, 10, 115, 30, 19, 10, 47, 28, 15, 25, 24, 30, 23, 25, 15, 30,\n    13, 3, 115, 30, 2, 29, 46, 28, 42, 1, 24, 30, 23, 28, 15, 30,\n    17, 0, 115, 30, 10, 23, 46, 28, 10, 35, 24, 30, 19, 35, 15, 30,\n    17, 1, 115, 30, 14, 21, 46, 28, 29, 19, 24, 30, 11, 46, 15, 30,\n    13, 6, 115, 30, 14, 23, 46, 28, 44, 7, 24, 30, 59, 1, 16, 30,\n    12, 7, 121, 30, 12, 26, 47, 28, 39, 14, 24, 30, 22, 41, 15, 30,\n    6, 14, 121, 30, 6, 34, 47, 28, 46, 10, 24, 30, 2, 64, 15, 30,\n    17, 4, 122, 30, 29, 14, 46, 28, 49, 10, 24, 30, 24, 46, 15, 30,\n    4, 18, 122, 30, 13, 32, 46, 28, 48, 14, 24, 30, 42, 32, 15, 30,\n    20, 4, 117, 30, 40, 7, 47, 28, 43, 22, 24, 30, 10, 67, 15, 30,\n    19, 6, 118, 30, 18, 31, 47, 28, 34, 34, 24, 30, 20, 61, 15, 30\n];\n\n// Galois field log table\nlet glog = [\n    0xff, 0x00, 0x01, 0x19, 0x02, 0x32, 0x1a, 0xc6, 0x03, 0xdf, 0x33, 0xee, 0x1b, 0x68, 0xc7, 0x4b,\n    0x04, 0x64, 0xe0, 0x0e, 0x34, 0x8d, 0xef, 0x81, 0x1c, 0xc1, 0x69, 0xf8, 0xc8, 0x08, 0x4c, 0x71,\n    0x05, 0x8a, 0x65, 0x2f, 0xe1, 0x24, 0x0f, 0x21, 0x35, 0x93, 0x8e, 0xda, 0xf0, 0x12, 0x82, 0x45,\n    0x1d, 0xb5, 0xc2, 0x7d, 0x6a, 0x27, 0xf9, 0xb9, 0xc9, 0x9a, 0x09, 0x78, 0x4d, 0xe4, 0x72, 0xa6,\n    0x06, 0xbf, 0x8b, 0x62, 0x66, 0xdd, 0x30, 0xfd, 0xe2, 0x98, 0x25, 0xb3, 0x10, 0x91, 0x22, 0x88,\n    0x36, 0xd0, 0x94, 0xce, 0x8f, 0x96, 0xdb, 0xbd, 0xf1, 0xd2, 0x13, 0x5c, 0x83, 0x38, 0x46, 0x40,\n    0x1e, 0x42, 0xb6, 0xa3, 0xc3, 0x48, 0x7e, 0x6e, 0x6b, 0x3a, 0x28, 0x54, 0xfa, 0x85, 0xba, 0x3d,\n    0xca, 0x5e, 0x9b, 0x9f, 0x0a, 0x15, 0x79, 0x2b, 0x4e, 0xd4, 0xe5, 0xac, 0x73, 0xf3, 0xa7, 0x57,\n    0x07, 0x70, 0xc0, 0xf7, 0x8c, 0x80, 0x63, 0x0d, 0x67, 0x4a, 0xde, 0xed, 0x31, 0xc5, 0xfe, 0x18,\n    0xe3, 0xa5, 0x99, 0x77, 0x26, 0xb8, 0xb4, 0x7c, 0x11, 0x44, 0x92, 0xd9, 0x23, 0x20, 0x89, 0x2e,\n    0x37, 0x3f, 0xd1, 0x5b, 0x95, 0xbc, 0xcf, 0xcd, 0x90, 0x87, 0x97, 0xb2, 0xdc, 0xfc, 0xbe, 0x61,\n    0xf2, 0x56, 0xd3, 0xab, 0x14, 0x2a, 0x5d, 0x9e, 0x84, 0x3c, 0x39, 0x53, 0x47, 0x6d, 0x41, 0xa2,\n    0x1f, 0x2d, 0x43, 0xd8, 0xb7, 0x7b, 0xa4, 0x76, 0xc4, 0x17, 0x49, 0xec, 0x7f, 0x0c, 0x6f, 0xf6,\n    0x6c, 0xa1, 0x3b, 0x52, 0x29, 0x9d, 0x55, 0xaa, 0xfb, 0x60, 0x86, 0xb1, 0xbb, 0xcc, 0x3e, 0x5a,\n    0xcb, 0x59, 0x5f, 0xb0, 0x9c, 0xa9, 0xa0, 0x51, 0x0b, 0xf5, 0x16, 0xeb, 0x7a, 0x75, 0x2c, 0xd7,\n    0x4f, 0xae, 0xd5, 0xe9, 0xe6, 0xe7, 0xad, 0xe8, 0x74, 0xd6, 0xf4, 0xea, 0xa8, 0x50, 0x58, 0xaf\n];\n\n// Galios field exponent table\nlet gexp = [\n    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1d, 0x3a, 0x74, 0xe8, 0xcd, 0x87, 0x13, 0x26,\n    0x4c, 0x98, 0x2d, 0x5a, 0xb4, 0x75, 0xea, 0xc9, 0x8f, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0,\n    0x9d, 0x27, 0x4e, 0x9c, 0x25, 0x4a, 0x94, 0x35, 0x6a, 0xd4, 0xb5, 0x77, 0xee, 0xc1, 0x9f, 0x23,\n    0x46, 0x8c, 0x05, 0x0a, 0x14, 0x28, 0x50, 0xa0, 0x5d, 0xba, 0x69, 0xd2, 0xb9, 0x6f, 0xde, 0xa1,\n    0x5f, 0xbe, 0x61, 0xc2, 0x99, 0x2f, 0x5e, 0xbc, 0x65, 0xca, 0x89, 0x0f, 0x1e, 0x3c, 0x78, 0xf0,\n    0xfd, 0xe7, 0xd3, 0xbb, 0x6b, 0xd6, 0xb1, 0x7f, 0xfe, 0xe1, 0xdf, 0xa3, 0x5b, 0xb6, 0x71, 0xe2,\n    0xd9, 0xaf, 0x43, 0x86, 0x11, 0x22, 0x44, 0x88, 0x0d, 0x1a, 0x34, 0x68, 0xd0, 0xbd, 0x67, 0xce,\n    0x81, 0x1f, 0x3e, 0x7c, 0xf8, 0xed, 0xc7, 0x93, 0x3b, 0x76, 0xec, 0xc5, 0x97, 0x33, 0x66, 0xcc,\n    0x85, 0x17, 0x2e, 0x5c, 0xb8, 0x6d, 0xda, 0xa9, 0x4f, 0x9e, 0x21, 0x42, 0x84, 0x15, 0x2a, 0x54,\n    0xa8, 0x4d, 0x9a, 0x29, 0x52, 0xa4, 0x55, 0xaa, 0x49, 0x92, 0x39, 0x72, 0xe4, 0xd5, 0xb7, 0x73,\n    0xe6, 0xd1, 0xbf, 0x63, 0xc6, 0x91, 0x3f, 0x7e, 0xfc, 0xe5, 0xd7, 0xb3, 0x7b, 0xf6, 0xf1, 0xff,\n    0xe3, 0xdb, 0xab, 0x4b, 0x96, 0x31, 0x62, 0xc4, 0x95, 0x37, 0x6e, 0xdc, 0xa5, 0x57, 0xae, 0x41,\n    0x82, 0x19, 0x32, 0x64, 0xc8, 0x8d, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xdd, 0xa7, 0x53, 0xa6,\n    0x51, 0xa2, 0x59, 0xb2, 0x79, 0xf2, 0xf9, 0xef, 0xc3, 0x9b, 0x2b, 0x56, 0xac, 0x45, 0x8a, 0x09,\n    0x12, 0x24, 0x48, 0x90, 0x3d, 0x7a, 0xf4, 0xf5, 0xf7, 0xf3, 0xfb, 0xeb, 0xcb, 0x8b, 0x0b, 0x16,\n    0x2c, 0x58, 0xb0, 0x7d, 0xfa, 0xe9, 0xcf, 0x83, 0x1b, 0x36, 0x6c, 0xd8, 0xad, 0x47, 0x8e, 0x00\n];\n\n// Working buffers:\n// data input and ecc append, image working buffer, fixed part of image, run lengths for badness\nvar strinbuf = [], eccbuf = [], qrframe = [], framask = [], rlens = [];\n// Control values - width is based on version, last 4 are from table.\nvar version, width, neccblk1, neccblk2, datablkw, eccblkwid;\nvar ecclevel = 1;\n// set bit to indicate cell in qrframe is immutable.  symmetric around diagonal\nfunction setmask(x, y) {\n    var bt;\n    if (x > y) {\n        bt = x;\n        x = y;\n        y = bt;\n    }\n    // y*y = 1+3+5...\n    bt = y;\n    bt *= y;\n    bt += y;\n    bt >>= 1;\n    bt += x;\n    framask[bt] = 1;\n}\n\n// enter alignment pattern - black to qrframe, white to mask (later black frame merged to mask)\nfunction putalign(x, y) {\n    var j;\n\n    qrframe[x + width * y] = 1;\n    for (j = -2; j < 2; j++) {\n        qrframe[(x + j) + width * (y - 2)] = 1;\n        qrframe[(x - 2) + width * (y + j + 1)] = 1;\n        qrframe[(x + 2) + width * (y + j)] = 1;\n        qrframe[(x + j + 1) + width * (y + 2)] = 1;\n    }\n    for (j = 0; j < 2; j++) {\n        setmask(x - 1, y + j);\n        setmask(x + 1, y - j);\n        setmask(x - j, y - 1);\n        setmask(x + j, y + 1);\n    }\n}\n\n//========================================================================\n// Reed Solomon error correction\n// exponentiation mod N\nfunction modnn(x) {\n    while (x >= 255) {\n        x -= 255;\n        x = (x >> 8) + (x & 255);\n    }\n    return x;\n}\n\nvar genpoly = [];\n\n// Calculate and append ECC data to data block.  Block is in strinbuf, indexes to buffers given.\nfunction appendrs(data, dlen, ecbuf, eclen) {\n    var i, j, fb;\n\n    for (i = 0; i < eclen; i++)\n        strinbuf[ecbuf + i] = 0;\n    for (i = 0; i < dlen; i++) {\n        fb = glog[strinbuf[data + i] ^ strinbuf[ecbuf]];\n        if (fb != 255)     /* fb term is non-zero */\n            for (j = 1; j < eclen; j++)\n                strinbuf[ecbuf + j - 1] = strinbuf[ecbuf + j] ^ gexp[modnn(fb + genpoly[eclen - j])];\n        else\n            for (j = ecbuf; j < ecbuf + eclen; j++)\n                strinbuf[j] = strinbuf[j + 1];\n        strinbuf[ecbuf + eclen - 1] = fb == 255 ? 0 : gexp[modnn(fb + genpoly[0])];\n    }\n}\n\n//========================================================================\n// Frame data insert following the path rules\n\n// check mask - since symmetrical use half.\nfunction ismasked(x, y) {\n    var bt;\n    if (x > y) {\n        bt = x;\n        x = y;\n        y = bt;\n    }\n    bt = y;\n    bt += y * y;\n    bt >>= 1;\n    bt += x;\n    return framask[bt];\n}\n\n//========================================================================\n//  Apply the selected mask out of the 8.\nfunction applymask(m) {\n    var x, y, r3x, r3y;\n\n    switch (m) {\n        case 0:\n            for (y = 0; y < width; y++)\n                for (x = 0; x < width; x++)\n                    if (!((x + y) & 1) && !ismasked(x, y))\n                        qrframe[x + y * width] ^= 1;\n            break;\n        case 1:\n            for (y = 0; y < width; y++)\n                for (x = 0; x < width; x++)\n                    if (!(y & 1) && !ismasked(x, y))\n                        qrframe[x + y * width] ^= 1;\n            break;\n        case 2:\n            for (y = 0; y < width; y++)\n                for (r3x = 0, x = 0; x < width; x++ , r3x++) {\n                    if (r3x == 3)\n                        r3x = 0;\n                    if (!r3x && !ismasked(x, y))\n                        qrframe[x + y * width] ^= 1;\n                }\n            break;\n        case 3:\n            for (r3y = 0, y = 0; y < width; y++ , r3y++) {\n                if (r3y == 3)\n                    r3y = 0;\n                for (r3x = r3y, x = 0; x < width; x++ , r3x++) {\n                    if (r3x == 3)\n                        r3x = 0;\n                    if (!r3x && !ismasked(x, y))\n                        qrframe[x + y * width] ^= 1;\n                }\n            }\n            break;\n        case 4:\n            for (y = 0; y < width; y++)\n                for (r3x = 0, r3y = ((y >> 1) & 1), x = 0; x < width; x++ , r3x++) {\n                    if (r3x == 3) {\n                        r3x = 0;\n                        r3y = !r3y;\n                    }\n                    if (!r3y && !ismasked(x, y))\n                        qrframe[x + y * width] ^= 1;\n                }\n            break;\n        case 5:\n            for (r3y = 0, y = 0; y < width; y++ , r3y++) {\n                if (r3y == 3)\n                    r3y = 0;\n                for (r3x = 0, x = 0; x < width; x++ , r3x++) {\n                    if (r3x == 3)\n                        r3x = 0;\n                    if (!((x & y & 1) + !(!r3x | !r3y)) && !ismasked(x, y))\n                        qrframe[x + y * width] ^= 1;\n                }\n            }\n            break;\n        case 6:\n            for (r3y = 0, y = 0; y < width; y++ , r3y++) {\n                if (r3y == 3)\n                    r3y = 0;\n                for (r3x = 0, x = 0; x < width; x++ , r3x++) {\n                    if (r3x == 3)\n                        r3x = 0;\n                    if (!(((x & y & 1) + (r3x && (r3x == r3y))) & 1) && !ismasked(x, y))\n                        qrframe[x + y * width] ^= 1;\n                }\n            }\n            break;\n        case 7:\n            for (r3y = 0, y = 0; y < width; y++ , r3y++) {\n                if (r3y == 3)\n                    r3y = 0;\n                for (r3x = 0, x = 0; x < width; x++ , r3x++) {\n                    if (r3x == 3)\n                        r3x = 0;\n                    if (!(((r3x && (r3x == r3y)) + ((x + y) & 1)) & 1) && !ismasked(x, y))\n                        qrframe[x + y * width] ^= 1;\n                }\n            }\n            break;\n    }\n    return;\n}\n\n// Badness coefficients.\nvar N1 = 3, N2 = 3, N3 = 40, N4 = 10;\n\n// Using the table of the length of each run, calculate the amount of bad image \n// - long runs or those that look like finders; called twice, once each for X and Y\nfunction badruns(length) {\n    var i;\n    var runsbad = 0;\n    for (i = 0; i <= length; i++)\n        if (rlens[i] >= 5)\n            runsbad += N1 + rlens[i] - 5;\n    // BwBBBwB as in finder\n    for (i = 3; i < length - 1; i += 2)\n        if (rlens[i - 2] == rlens[i + 2]\n            && rlens[i + 2] == rlens[i - 1]\n            && rlens[i - 1] == rlens[i + 1]\n            && rlens[i - 1] * 3 == rlens[i]\n            // white around the black pattern? Not part of spec\n            && (rlens[i - 3] == 0 // beginning\n                || i + 3 > length  // end\n                || rlens[i - 3] * 3 >= rlens[i] * 4 || rlens[i + 3] * 3 >= rlens[i] * 4)\n        )\n            runsbad += N3;\n    return runsbad;\n}\n\n// Calculate how bad the masked image is - blocks, imbalance, runs, or finders.\nfunction badcheck() {\n    var x, y, h, b, b1;\n    var thisbad = 0;\n    var bw = 0;\n\n    // blocks of same color.\n    for (y = 0; y < width - 1; y++)\n        for (x = 0; x < width - 1; x++)\n            if ((qrframe[x + width * y] && qrframe[(x + 1) + width * y]\n                && qrframe[x + width * (y + 1)] && qrframe[(x + 1) + width * (y + 1)]) // all black\n                || !(qrframe[x + width * y] || qrframe[(x + 1) + width * y]\n                    || qrframe[x + width * (y + 1)] || qrframe[(x + 1) + width * (y + 1)])) // all white\n                thisbad += N2;\n\n    // X runs\n    for (y = 0; y < width; y++) {\n        rlens[0] = 0;\n        for (h = b = x = 0; x < width; x++) {\n            if ((b1 = qrframe[x + width * y]) == b)\n                rlens[h]++;\n            else\n                rlens[++h] = 1;\n            b = b1;\n            bw += b ? 1 : -1;\n        }\n        thisbad += badruns(h);\n    }\n\n    // black/white imbalance\n    if (bw < 0)\n        bw = -bw;\n\n    var big = bw;\n    let count = 0;\n    big += big << 2;\n    big <<= 1;\n    while (big > width * width)\n        big -= width * width, count++;\n    thisbad += count * N4;\n\n    // Y runs\n    for (x = 0; x < width; x++) {\n        rlens[0] = 0;\n        for (h = b = y = 0; y < width; y++) {\n            if ((b1 = qrframe[x + width * y]) == b)\n                rlens[h]++;\n            else\n                rlens[++h] = 1;\n            b = b1;\n        }\n        thisbad += badruns(h);\n    }\n    return thisbad;\n}\n\nfunction genframe(instring, ecclevel) {\n    var x, y, k, t, v, i, j, m;\n\n    // find the smallest version that fits the string\n    t = instring.length;\n    version = 0;\n    do {\n        version++;\n        k = (ecclevel - 1) * 4 + (version - 1) * 16;\n        neccblk1 = eccblocks[k++];\n        neccblk2 = eccblocks[k++];\n        datablkw = eccblocks[k++];\n        eccblkwid = eccblocks[k];\n        k = datablkw * (neccblk1 + neccblk2) + neccblk2 - 3 + (version <= 9);\n        if (t <= k)\n            break;\n    } while (version < 40);\n\n    // FIXME - insure that it fits insted of being truncated\n    width = 17 + 4 * version;\n\n    // allocate, clear and setup data structures\n    v = datablkw + (datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2;\n    for (t = 0; t < v; t++)\n        eccbuf[t] = 0;\n    strinbuf = instring.slice(0);\n\n    for (t = 0; t < width * width; t++)\n        qrframe[t] = 0;\n\n    for (t = 0; t < (width * (width + 1) + 1) / 2; t++)\n        framask[t] = 0;\n\n    // insert finders - black to frame, white to mask\n    for (t = 0; t < 3; t++) {\n        k = 0;\n        y = 0;\n        if (t == 1)\n            k = (width - 7);\n        if (t == 2)\n            y = (width - 7);\n        qrframe[(y + 3) + width * (k + 3)] = 1;\n        for (x = 0; x < 6; x++) {\n            qrframe[(y + x) + width * k] = 1;\n            qrframe[y + width * (k + x + 1)] = 1;\n            qrframe[(y + 6) + width * (k + x)] = 1;\n            qrframe[(y + x + 1) + width * (k + 6)] = 1;\n        }\n        for (x = 1; x < 5; x++) {\n            setmask(y + x, k + 1);\n            setmask(y + 1, k + x + 1);\n            setmask(y + 5, k + x);\n            setmask(y + x + 1, k + 5);\n        }\n        for (x = 2; x < 4; x++) {\n            qrframe[(y + x) + width * (k + 2)] = 1;\n            qrframe[(y + 2) + width * (k + x + 1)] = 1;\n            qrframe[(y + 4) + width * (k + x)] = 1;\n            qrframe[(y + x + 1) + width * (k + 4)] = 1;\n        }\n    }\n\n    // alignment blocks\n    if (version > 1) {\n        t = adelta[version];\n        y = width - 7;\n        for (; ;) {\n            x = width - 7;\n            while (x > t - 3) {\n                putalign(x, y);\n                if (x < t)\n                    break;\n                x -= t;\n            }\n            if (y <= t + 9)\n                break;\n            y -= t;\n            putalign(6, y);\n            putalign(y, 6);\n        }\n    }\n\n    // single black\n    qrframe[8 + width * (width - 8)] = 1;\n\n    // timing gap - mask only\n    for (y = 0; y < 7; y++) {\n        setmask(7, y);\n        setmask(width - 8, y);\n        setmask(7, y + width - 7);\n    }\n    for (x = 0; x < 8; x++) {\n        setmask(x, 7);\n        setmask(x + width - 8, 7);\n        setmask(x, width - 8);\n    }\n\n    // reserve mask-format area\n    for (x = 0; x < 9; x++)\n        setmask(x, 8);\n    for (x = 0; x < 8; x++) {\n        setmask(x + width - 8, 8);\n        setmask(8, x);\n    }\n    for (y = 0; y < 7; y++)\n        setmask(8, y + width - 7);\n\n    // timing row/col\n    for (x = 0; x < width - 14; x++)\n        if (x & 1) {\n            setmask(8 + x, 6);\n            setmask(6, 8 + x);\n        }\n        else {\n            qrframe[(8 + x) + width * 6] = 1;\n            qrframe[6 + width * (8 + x)] = 1;\n        }\n\n    // version block\n    if (version > 6) {\n        t = vpat[version - 7];\n        k = 17;\n        for (x = 0; x < 6; x++)\n            for (y = 0; y < 3; y++ , k--)\n                if (1 & (k > 11 ? version >> (k - 12) : t >> k)) {\n                    qrframe[(5 - x) + width * (2 - y + width - 11)] = 1;\n                    qrframe[(2 - y + width - 11) + width * (5 - x)] = 1;\n                }\n                else {\n                    setmask(5 - x, 2 - y + width - 11);\n                    setmask(2 - y + width - 11, 5 - x);\n                }\n    }\n\n    // sync mask bits - only set above for white spaces, so add in black bits\n    for (y = 0; y < width; y++)\n        for (x = 0; x <= y; x++)\n            if (qrframe[x + width * y])\n                setmask(x, y);\n\n    // convert string to bitstream\n    // 8 bit data to QR-coded 8 bit data (numeric or alphanum, or kanji not supported)\n    v = strinbuf.length;\n\n    // string to array\n    for (i = 0; i < v; i++)\n        eccbuf[i] = strinbuf.charCodeAt(i);\n    strinbuf = eccbuf.slice(0);\n\n    // calculate max string length\n    x = datablkw * (neccblk1 + neccblk2) + neccblk2;\n    if (v >= x - 2) {\n        v = x - 2;\n        if (version > 9)\n            v--;\n    }\n\n    // shift and repack to insert length prefix\n    i = v;\n    if (version > 9) {\n        strinbuf[i + 2] = 0;\n        strinbuf[i + 3] = 0;\n        while (i--) {\n            t = strinbuf[i];\n            strinbuf[i + 3] |= 255 & (t << 4);\n            strinbuf[i + 2] = t >> 4;\n        }\n        strinbuf[2] |= 255 & (v << 4);\n        strinbuf[1] = v >> 4;\n        strinbuf[0] = 0x40 | (v >> 12);\n    }\n    else {\n        strinbuf[i + 1] = 0;\n        strinbuf[i + 2] = 0;\n        while (i--) {\n            t = strinbuf[i];\n            strinbuf[i + 2] |= 255 & (t << 4);\n            strinbuf[i + 1] = t >> 4;\n        }\n        strinbuf[1] |= 255 & (v << 4);\n        strinbuf[0] = 0x40 | (v >> 4);\n    }\n    // fill to end with pad pattern\n    i = v + 3 - (version < 10);\n    while (i < x) {\n        strinbuf[i++] = 0xec;\n        // buffer has room    if (i == x)      break;\n        strinbuf[i++] = 0x11;\n    }\n\n    // calculate and append ECC\n\n    // calculate generator polynomial\n    genpoly[0] = 1;\n    for (i = 0; i < eccblkwid; i++) {\n        genpoly[i + 1] = 1;\n        for (j = i; j > 0; j--)\n            genpoly[j] = genpoly[j]\n                ? genpoly[j - 1] ^ gexp[modnn(glog[genpoly[j]] + i)] : genpoly[j - 1];\n        genpoly[0] = gexp[modnn(glog[genpoly[0]] + i)];\n    }\n    for (i = 0; i <= eccblkwid; i++)\n        genpoly[i] = glog[genpoly[i]]; // use logs for genpoly[] to save calc step\n\n    // append ecc to data buffer\n    k = x;\n    y = 0;\n    for (i = 0; i < neccblk1; i++) {\n        appendrs(y, datablkw, k, eccblkwid);\n        y += datablkw;\n        k += eccblkwid;\n    }\n    for (i = 0; i < neccblk2; i++) {\n        appendrs(y, datablkw + 1, k, eccblkwid);\n        y += datablkw + 1;\n        k += eccblkwid;\n    }\n    // interleave blocks\n    y = 0;\n    for (i = 0; i < datablkw; i++) {\n        for (j = 0; j < neccblk1; j++)\n            eccbuf[y++] = strinbuf[i + j * datablkw];\n        for (j = 0; j < neccblk2; j++)\n            eccbuf[y++] = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];\n    }\n    for (j = 0; j < neccblk2; j++)\n        eccbuf[y++] = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];\n    for (i = 0; i < eccblkwid; i++)\n        for (j = 0; j < neccblk1 + neccblk2; j++)\n            eccbuf[y++] = strinbuf[x + i + j * eccblkwid];\n    strinbuf = eccbuf;\n\n    // pack bits into frame avoiding masked area.\n    x = y = width - 1;\n    k = v = 1;         // up, minus\n    /* inteleaved data and ecc codes */\n    m = (datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2;\n    for (i = 0; i < m; i++) {\n        t = strinbuf[i];\n        for (j = 0; j < 8; j++ , t <<= 1) {\n            if (0x80 & t)\n                qrframe[x + width * y] = 1;\n            do {        // find next fill position\n                if (v)\n                    x--;\n                else {\n                    x++;\n                    if (k) {\n                        if (y != 0)\n                            y--;\n                        else {\n                            x -= 2;\n                            k = !k;\n                            if (x == 6) {\n                                x--;\n                                y = 9;\n                            }\n                        }\n                    }\n                    else {\n                        if (y != width - 1)\n                            y++;\n                        else {\n                            x -= 2;\n                            k = !k;\n                            if (x == 6) {\n                                x--;\n                                y -= 8;\n                            }\n                        }\n                    }\n                }\n                v = !v;\n            } while (ismasked(x, y));\n        }\n    }\n\n    // save pre-mask copy of frame\n    strinbuf = qrframe.slice(0);\n    t = 0;           // best\n    y = 30000;         // demerit\n    // for instead of while since in original arduino code\n    // if an early mask was \"good enough\" it wouldn't try for a better one\n    // since they get more complex and take longer.\n    for (k = 0; k < 8; k++) {\n        applymask(k);      // returns black-white imbalance\n        x = badcheck();\n        if (x < y) { // current mask better than previous best?\n            y = x;\n            t = k;\n        }\n        if (t == 7)\n            break;       // don't increment i to a void redoing mask\n        qrframe = strinbuf.slice(0); // reset for next pass\n    }\n    if (t != k)         // redo best mask - none good enough, last wasn't t\n        applymask(t);\n\n    // add in final mask/ecclevel bytes\n    y = fmtword[t + ((ecclevel - 1) << 3)];\n    // low byte\n    for (k = 0; k < 8; k++ , y >>= 1)\n        if (y & 1) {\n            qrframe[(width - 1 - k) + width * 8] = 1;\n            if (k < 6)\n                qrframe[8 + width * k] = 1;\n            else\n                qrframe[8 + width * (k + 1)] = 1;\n        }\n    // high byte\n    for (k = 0; k < 7; k++ , y >>= 1)\n        if (y & 1) {\n            qrframe[8 + width * (width - 7 + k)] = 1;\n            if (k)\n                qrframe[(6 - k) + width * 8] = 1;\n            else\n                qrframe[7 + width * 8] = 1;\n        }\n\n    // return image\n    return qrframe;\n}\n\nvar wd, ht, qrc;\nfunction doqr(ecclevel, qr_value, wd = 300, ht = 300) {\n\n    var elem = document.createElement(\"canvas\");\n    elem.id = \"qrcanv\";\n\n    qrc = elem.getContext('2d');\n\n    let px = wd;\n    if (ht < wd)\n        px = ht;\n    px /= width + 10;\n    px = Math.round(px - 0.5);\n\n    qrc.canvas.width = px * (width + 2);\n    qrc.canvas.height = px * (width + 2);\n\n    qrc.fillStyle = '#eee';\n    qrc.fillRect(0, 0, px * (width + 2), px * (width + 2));\n    let qf = genframe(qr_value, ecclevel);\n    qrc.lineWidth = 1;\n\n    var i, j;\n    qrc.clearRect(0, 0, wd, ht);\n    qrc.fillStyle = '#fff';\n    qrc.fillRect(0, 0, px * (width + 2), px * (width + 2));\n    qrc.fillStyle = '#000';\n    for (i = 0; i < width; i++)\n        for (j = 0; j < width; j++)\n            if (qf[j * width + i])\n                qrc.fillRect(px * (1 + i), px * (1 + j), px, px)\n\n    return elem.toDataURL();\n\n}\nexport { doqr };\n","import * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport { doqr } from './source/qr'\n\ninterface Props {\n  qrvalue: string\n  size?: number\n  level?: number\n}\n\nexport const ReactQrcode = ({\n  qrvalue = 'This is Qrcode',\n  size = 200,\n  level = 1\n}: Props) => {\n  const [result, setresult] = useState(doqr(level, qrvalue, size, size))\n\n  useEffect(() => {\n    setresult(doqr(level, qrvalue, size, size))\n  }, [level, qrvalue, size, size])\n\n  return (\n    <React.Fragment>\n      <img height={size} src={result} />\n    </React.Fragment>\n  )\n}\n","import React, { useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ReactQrcode } from 'reactjs-qrcode-generator'\nimport 'reactjs-qrcode-generator/dist/index.css'\n\n\nconst App = () => {\n  const [qrvalue, setQrvalue] = useState('Hello this is QRCode')\n  const [size, setsize] = useState(200)\n  return (\n    <div className=\"card\">\n      <a href=\"https://github.com/naimmalek/reactjs-qrcode-generator\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\" className=\"github-fork-ribbon\">Fork me on GitHub</a>\n      <h5 className=\"card-header info-color white-text text-center py-4\">\n        <strong>ReactJs Qrcode Generator</strong>\n      </h5>\n      <div className=\"card-body px-lg-5 pt-0\">\n        <div style={{ margin: '10px 0 0 0' }} className=\"row\">\n          <div className=\"col-md-12 text-center\">\n            <div className=\"col-md-12 text-center\"> npm package link\n              <a href=\"https://www.npmjs.com/package/reactjs-qrcode-generator\"> reactjs-qrcode-generator</a>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <form style={{ margin: '15px 0 0 0' }}>\n              <div className=\"form-group\">\n                <label>Value</label>\n                <input className=\"form-control\" value=\"Hello this is QRCode\" onChange={e => setQrvalue(e.target.value)} />\n              </div>\n              <div className=\"form-group\">\n                <label >Size</label>\n                <input className=\"form-control\" type=\"number\" value={size} min=\"200\" placeholder=\"Size\" onChange={e => setsize(parseInt(e.target.value))} />\n              </div>\n            </form>\n          </div>\n          <div className=\"col-md-6\">\n            <div style={{ margin: '15px 0 0 0' }}>\n              <ReactQrcode qrvalue={qrvalue} size={size} level={1} />\n            </div>\n          </div>\n        </div>\n\n        <hr></hr>\n\n        <div className=\"row\" style={{ margin: '10px 0 0 0' }} >\n          <div className=\"col-md-12 text-center\">\n            <a href=\"https://naimmalek.github.io\">Copyright (c) 2021 Naim Malek\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}